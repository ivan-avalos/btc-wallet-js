const crypto = require ('crypto');
const secp256k1 = require ('secp256k1');
const utils = require ('./utils.js');

/*
 * main.js
 * 
 * Copyright 2019 Iván Ávalos <ivan.avalos.diaz@hotmail.com>
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 * 
 * 
 */

private_key_hex = crypto.randomBytes (32).toString ('hex');

private_key_with_version = '80' + private_key_hex;

private_key_wif_for_uncompressed = utils
	.wif_private_key (private_key_with_version);

private_key_with_version_comp = private_key_with_version + '01';

private_key_wif_for_compressed = utils
	.wif_private_key (private_key_with_version_comp);

public_key_version = secp256k1
	.publicKeyCreate (Buffer.from(private_key_hex, 'hex'), compressed = false)
	.toString ('hex');

public_address_uncompressed = utils.public_address (public_key_version);

public_key_version_comp = secp256k1
	.publicKeyCreate (Buffer.from (private_key_hex, 'hex'), compressed = true)
	.toString ('hex');

public_address_compressed = utils.public_address (public_key_version_comp);

console.log ('WIF corresponding to UNCOMPRESSED public key:');
console.log (private_key_wif_for_uncompressed);

if (utils
	.validate_public_against_py_bitcoin (private_key_hex, 
										 public_address_uncompressed, 
										 false)) {
	console.log ("Verified Uncompressed Public Address:");
	console.log (public_address_uncompressed);
} else {
	console.log ('Ops!, Uncompressed Public Address does not match with the one generated by pybitcoin library.');
}

console.log ('WIF corresponding to COMPRESSED public key:');
console.log (private_key_wif_for_compressed);

if (utils
	.validate_public_against_py_bitcoin (private_key_hex,
										 public_address_compressed,
										 true)) {
	console.log ('Verified Compressed Public Address:');
	console.log (public_address_compressed);
} else {
	console.log ('Ops!, Compressed Public Address does not match with the one generated by pybitcoin library.');
}